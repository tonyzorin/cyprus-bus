Index: public/busMarkers.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export var busMarkers = {};\n\nexport var userIcon = L.icon({\n    iconUrl: './images/current-location.png',\n    iconSize: [40, 40],\n    iconAnchor: [24, 40],\n    popupAnchor: [0, 0]\n});\n\nexport var busStopIcon = L.icon({\n    iconUrl: './images/bus-stop.png',\n    iconSize: [14, 14],\n    iconAnchor: [14, 14],\n    popupAnchor: [0, -28]\n});\n\nexport async function fetchOrCreatePin(routeShortName, routeColor, routeTextColor) {\n    routeColor = routeColor.startsWith('#') ? routeColor : `#${routeColor}`;\n    routeTextColor = routeTextColor.startsWith('#') ? routeTextColor : `#${routeTextColor}`;\n    const svgContent = `\n        <svg width=\"70\" height=\"95\" viewBox=\"0 0 70 95\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M34.9556 94.6442C34.0638 94.651 33.1921 94.3771 32.462 93.8607C31.7319 93.3443 31.1797 92.6112 30.8825 91.7634C26.3231 79.0907 9.31643 60.1199 9.13405 59.9207L9.02766 59.7828C4.49113 54.7241 1.50766 48.4471 0.43903 41.7129C-0.629603 34.9786 0.262503 28.0764 3.00718 21.8431C5.75186 15.6099 10.2312 10.3135 15.902 6.59609C21.5729 2.87869 28.1916 0.900024 34.9556 0.900024C41.7195 0.900024 48.3383 2.87869 54.0091 6.59609C59.6799 10.3135 64.1593 15.6099 66.9039 21.8431C69.6486 28.0764 70.5407 34.9786 69.4721 41.7129C68.4035 48.4471 65.42 54.7241 60.8834 59.7828L60.7771 59.9207C60.5947 60.1199 43.588 79.0907 39.0286 91.7634C38.7333 92.6124 38.1817 93.3469 37.4511 93.8636C36.7206 94.3803 35.8479 94.6533 34.9556 94.6442Z\" fill=\"${routeColor}\"/>\n            <text x=\"35\" y=\"47.5\" text-anchor=\"middle\" fill=\"${routeColor}\" dy=\".3em\" style=\"font-size: 14px;\">${routeShortName}</text>\n        </svg>\n    `;\n    const encodedSvg = encodeURIComponent(svgContent);\n    const iconUrl = `data:image/svg+xml;charset=UTF-8,${encodedSvg}`;\n    return L.icon({\n        iconUrl: iconUrl,\n        iconSize: [32, 47],\n        iconAnchor: [16, 47],\n        popupAnchor: [0, -47]\n    });\n}\n\nexport async function moveMarkerSmoothly(marker, newPosition) {\n    let currentLatLng = marker.getLatLng();\n    let newLatLng = L.latLng(newPosition);\n    let distance = currentLatLng.distanceTo(newLatLng);\n    let steps = distance / 10;\n    let stepLat = (newLatLng.lat - currentLatLng.lat) / steps;\n    let stepLng = (newLatLng.lng - currentLatLng.lng) / steps;\n    let i = 0;\n    let interval = setInterval(() => {\n        if (i < steps) {\n            i++;\n            marker.setLatLng([currentLatLng.lat + (stepLat * i), currentLatLng.lng + (stepLng * i)]);\n        } else {\n            clearInterval(interval);\n            marker.setLatLng(newLatLng);\n        }\n    }, 20);\n}\n\nexport async function createNewMarker(latitude, longitude, markerIcon, entity, map) { // Accept map as parameter\n    console.log('Creating new marker...');\n    console.log('Latitude:', latitude);\n    console.log('Longitude:', longitude);\n    console.log('Marker icon:', markerIcon);\n    console.log('Entity:', entity);\n\n    const bearing = entity.vehicle.position.bearing || 0; // Use 0 as default if undefined\n    console.log('Bearing:', bearing);\n\n    const routeShortName = entity.routeShortName || \"?\";\n    const routeTextColor = entity.routeTextColor || \"#000000\"; // Default to black if undefined\n    const validRouteTextColor = routeTextColor.startsWith('#') ? routeTextColor : `#${routeTextColor}`;\n    console.log('Route short name:', routeShortName);\n    console.log('Route text color:', validRouteTextColor);\n\n    // Constructing marker HTML content\n    const customHtmlContent = `\n        <div style=\"position: relative; font-size: 12px; text-align: center; width: 70px;\">\n            <div style=\"position: relative; top: 78%; left: 78%; transform: translateX(-50%) rotate(${bearing}deg);\">\n                <img src=\"${markerIcon.options.iconUrl}\" style=\"width: 32px; height: 47px;\">\n                <div style=\"position: absolute; top: 22%; left: 22%; transform: translateX(-50%) rotate(-${bearing}deg); color: #${entity.routeTextColor};\">\n                ${routeShortName}\n            </div>\n            </div>\n        </div>\n    `;\n    console.log('Custom HTML content for marker:', customHtmlContent);\n\n    const customIcon = L.divIcon({\n        html: customHtmlContent,\n        iconSize: [70, 95], // Adjusted to contain both the pin and text\n        iconAnchor: [35, 47.5], // Centered anchor point\n        popupAnchor: [0, -47.5] // Adjust if necessary\n    });\n    console.log('Custom icon created.');\n\n    // Update or create a new marker\n    if (busMarkers[entity.vehicle.vehicle.label]) {\n        console.log('Updating existing marker for vehicle label:', entity.vehicle.vehicle.label);\n        busMarkers[entity.vehicle.vehicle.label].setLatLng([latitude, longitude]).setIcon(customIcon);\n    } else {\n        console.log('Creating new marker for vehicle label:', entity.vehicle.vehicle.label);\n        busMarkers[entity.vehicle.vehicle.label] = L.marker([latitude, longitude], { icon: customIcon }).addTo(map); // Add to map\n        busMarkers[entity.vehicle.vehicle.label].bindPopup(generatePopupContent(entity));\n    }\n\n    // Attach a click event if needed\n    busMarkers[entity.vehicle.vehicle.label].on('click', () => onBusMarkerClick(entity.routeId));\n    console.log('Marker created and added to map.');\n\n    return busMarkers[entity.vehicle.vehicle.label]; // Return the Leaflet marker instance\n}\n\n\nexport async function onBusMarkerClick(routeId) {\n    // Check if the routeId is \"Unknown\" and exit early if so\n    if (routeId === \"\") {\n        console.warn(\"Route details are unknown. Cannot fetch route shapes.\");\n        // Optionally, display a message to the user here.\n        return; // Exit the function early\n    }\n\n    // Proceed to fetch route shapes if the routeId is known\n    fetch(`/api/route-shapes/${routeId}`)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(shapePoints => {\n            if (!Array.isArray(shapePoints) || shapePoints.length === 0) {\n                console.warn(\"No route shapes returned for routeId:\", routeId);\n                return; // Exit the function if no shapes were returned\n            }\n\n            // Remove the previous route from the map if it exists\n            if (currentRoutePolyline) {\n                map.removeLayer(currentRoutePolyline);\n                currentRoutePolyline = null; // Reset the currentRoutePolyline\n            }\n\n            const latLngs = shapePoints.map(point => [point.shape_pt_lat, point.shape_pt_lon]);\n            const routeColor = `#${shapePoints[0].route_color}`; // Extract color\n\n            if (latLngs.length > 0) {\n                // Create the polyline without altering the map's view\n                currentRoutePolyline = L.polyline(latLngs, {color: routeColor, weight: 6}).addTo(map);\n                // Do not call map.fitBounds() to avoid changing the zoom level and center\n            } else {\n                console.warn(\"Invalid or empty latLngs array for routeId:\", routeId);\n            }\n        })\n        .catch(error => console.error('Error fetching route shapes:', error));\n}\n\nexport async function cleanupMarkers(activeVehicleLabels) {\n    Object.keys(busMarkers).forEach(vehicleLabel => {\n        if (!activeVehicleLabels.has(vehicleLabel)) {\n            // Remove marker if vehicleLabel is not in activeVehicleLabels\n            if (busMarkers[vehicleLabel].remove) {\n                busMarkers[vehicleLabel].remove(); // Remove from map\n            }\n            delete busMarkers[vehicleLabel]; // Delete from busMarkers\n        }\n    });\n}\n\nexport async function processVehiclePositions(data, map) {\n    const activeVehicleLabels = new Set(); // Track active vehicles\n\n    for (const entity of data) {\n        const {latitude, longitude, markerIcon, vehicleLabel} = await extractMarkerData(entity);\n        activeVehicleLabels.add(vehicleLabel);\n\n        if (busMarkers[vehicleLabel]) {\n            moveMarkerSmoothly(busMarkers[vehicleLabel], [latitude, longitude]);\n\n            // Update the icon with new bearing\n            const bearing = entity.vehicle.position.bearing+180 || 0; // Default to 0 if undefined\n            const customHtmlContent = `\n            <div style=\"position: relative; font-size: 12px; text-align: center; width: 70px;\">\n                <div style=\"position: relative; top: 78%; left: 60%; transform: translateX(-100%) rotate(${bearing}deg);\">\n                    <img src=\"${markerIcon.options.iconUrl}\" style=\"width: 32px; height: 47px;\">\n                        <div style=\"position: absolute; top: 22%; left: 22%; transform: translateX(-50%) rotate(-${bearing}deg); color: ${entity.routeTextColor};\">\n                            ${entity.routeShortName}\n                        </div>\n                </div>\n            </div>`;\n            const customIcon = L.divIcon({\n                html: svgContent,\n                iconSize: [32, 47],\n                iconAnchor: [16, 23.5], // Adjust as necessary\n                popupAnchor: [0, -23.5] // Adjust as necessary\n            });\n\n            busMarkers[vehicleLabel].setIcon(customIcon);\n        }\n        else {\n            // If marker doesn't exist, create a new one\n            busMarkers[vehicleLabel] = await createNewMarker(latitude, longitude, markerIcon, entity, map); // Pass map to createNewMarker\n        }\n\n    }\n\n    // Now cleanup markers for vehicles no longer present\n    cleanupMarkers(activeVehicleLabels);\n}\n
===================================================================
diff --git a/public/busMarkers.js b/public/busMarkers.js
--- a/public/busMarkers.js	
+++ b/public/busMarkers.js	
@@ -1,19 +1,9 @@
+import {busStopIcon} from './frontend.js';
+import * as L from 'https://unpkg.com/leaflet/dist/leaflet.js'; // Ensure Leaflet is imported
+
+
 export var busMarkers = {};
 
-export var userIcon = L.icon({
-    iconUrl: './images/current-location.png',
-    iconSize: [40, 40],
-    iconAnchor: [24, 40],
-    popupAnchor: [0, 0]
-});
-
-export var busStopIcon = L.icon({
-    iconUrl: './images/bus-stop.png',
-    iconSize: [14, 14],
-    iconAnchor: [14, 14],
-    popupAnchor: [0, -28]
-});
-
 export async function fetchOrCreatePin(routeShortName, routeColor, routeTextColor) {
     routeColor = routeColor.startsWith('#') ? routeColor : `#${routeColor}`;
     routeTextColor = routeTextColor.startsWith('#') ? routeTextColor : `#${routeTextColor}`;
@@ -161,43 +151,3 @@
     });
 }
 
-export async function processVehiclePositions(data, map) {
-    const activeVehicleLabels = new Set(); // Track active vehicles
-
-    for (const entity of data) {
-        const {latitude, longitude, markerIcon, vehicleLabel} = await extractMarkerData(entity);
-        activeVehicleLabels.add(vehicleLabel);
-
-        if (busMarkers[vehicleLabel]) {
-            moveMarkerSmoothly(busMarkers[vehicleLabel], [latitude, longitude]);
-
-            // Update the icon with new bearing
-            const bearing = entity.vehicle.position.bearing+180 || 0; // Default to 0 if undefined
-            const customHtmlContent = `
-            <div style="position: relative; font-size: 12px; text-align: center; width: 70px;">
-                <div style="position: relative; top: 78%; left: 60%; transform: translateX(-100%) rotate(${bearing}deg);">
-                    <img src="${markerIcon.options.iconUrl}" style="width: 32px; height: 47px;">
-                        <div style="position: absolute; top: 22%; left: 22%; transform: translateX(-50%) rotate(-${bearing}deg); color: ${entity.routeTextColor};">
-                            ${entity.routeShortName}
-                        </div>
-                </div>
-            </div>`;
-            const customIcon = L.divIcon({
-                html: svgContent,
-                iconSize: [32, 47],
-                iconAnchor: [16, 23.5], // Adjust as necessary
-                popupAnchor: [0, -23.5] // Adjust as necessary
-            });
-
-            busMarkers[vehicleLabel].setIcon(customIcon);
-        }
-        else {
-            // If marker doesn't exist, create a new one
-            busMarkers[vehicleLabel] = await createNewMarker(latitude, longitude, markerIcon, entity, map); // Pass map to createNewMarker
-        }
-
-    }
-
-    // Now cleanup markers for vehicles no longer present
-    cleanupMarkers(activeVehicleLabels);
-}
Index: public/initMap.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { fetchStops, fetchBusPositions } from './fetchData.js';\nimport { userIcon } from './busMarkers.js';\nimport { busStopIcon } from './busMarkers.js';\nimport { showUserPosition } from './userPosition.js';\n\nlet map;\nconst LOGGING_ENABLED = 1; // Set to 0 to disable logging\n\nlet busMarkers = {}; // Array to store references to bus markers\nlet currentRoutePolyline = null; // This will store the current route polyline\n\nexport async function initMap() {\n    if (!map) {\n        map = L.map('map', {\n            center: [34.679309, 33.037098],\n            zoom: 9,\n            attributionControl: false // Disable the default attribution control\n        });\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '© OpenStreetMap contributors'\n        }).addTo(map);\n\n        // Add a new attribution control at the top right (\"topright\")\n        L.control.attribution({position: 'topright'}).addTo(map);\n    }\n    await fetchStops(map);\n    fetchBusPositions();\n    showUserPosition(map);\n    setInterval(() => fetchBusPositions(map), 20000); // Refresh bus positions every 10 seconds\n}\nexport { map }; // Export the map object for use in other modules\n
===================================================================
diff --git a/public/initMap.js b/public/initMap.js
--- a/public/initMap.js	
+++ b/public/initMap.js	
@@ -1,31 +1,0 @@
-import { fetchStops, fetchBusPositions } from './fetchData.js';
-import { userIcon } from './busMarkers.js';
-import { busStopIcon } from './busMarkers.js';
-import { showUserPosition } from './userPosition.js';
-
-let map;
-const LOGGING_ENABLED = 1; // Set to 0 to disable logging
-
-let busMarkers = {}; // Array to store references to bus markers
-let currentRoutePolyline = null; // This will store the current route polyline
-
-export async function initMap() {
-    if (!map) {
-        map = L.map('map', {
-            center: [34.679309, 33.037098],
-            zoom: 9,
-            attributionControl: false // Disable the default attribution control
-        });
-        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
-            attribution: '© OpenStreetMap contributors'
-        }).addTo(map);
-
-        // Add a new attribution control at the top right ("topright")
-        L.control.attribution({position: 'topright'}).addTo(map);
-    }
-    await fetchStops(map);
-    fetchBusPositions();
-    showUserPosition(map);
-    setInterval(() => fetchBusPositions(map), 20000); // Refresh bus positions every 10 seconds
-}
-export { map }; // Export the map object for use in other modules
Index: public/fetchData.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { busMarkers, fetchOrCreatePin, moveMarkerSmoothly, createNewMarker, busStopIcon } from './busMarkers.js';\n\nexport async function fetchStops(map) {\n    try {\n        const response = await fetch('/api/stops');\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const stops = await response.json();\n        stops.forEach(stop => {\n            L.marker([stop.lat, stop.lon], { icon: busStopIcon }).addTo(map)\n                .bindPopup(`<b>${stop.name}</b>`);\n        });\n    } catch (error) {\n        console.error('Error fetching stops:', error);\n    }\n}\n\nexport async function fetchBusPositions(map) {\n    console.log('Starting fetch for bus positions...');\n    try {\n        const response = await fetch('/api/vehicle-positions');\n        console.log(`Fetch response status: ${response.status}`);\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log('Fetch response data:', data);\n\n        await processVehiclePositions(data); // Pass map to processVehiclePositions\n        console.log('Processed vehicle positions successfully.');\n    } catch (error) {\n        console.error('Error fetching vehicle positions:', error);\n    }\n}\n\nexport async function processVehiclePositions(data, map) {\n    const activeVehicleLabels = new Set();\n    for (const entity of data) {\n        const { latitude, longitude, markerIcon, vehicleLabel } = await extractMarkerData(entity);\n        activeVehicleLabels.add(vehicleLabel);\n        if (busMarkers[vehicleLabel]) {\n            moveMarkerSmoothly(busMarkers[vehicleLabel], [latitude, longitude]);\n        } else {\n            busMarkers[vehicleLabel] = await createNewMarker(latitude, longitude, markerIcon, entity);\n        }\n    }\n    cleanupMarkers(activeVehicleLabels);\n}\n\nasync function extractMarkerData(entity) {\n    const routeShortName = entity.routeShortName || \"?\";\n    const latitude = entity.vehicle.position.latitude;\n    const longitude = entity.vehicle.position.longitude;\n    const markerIcon = await fetchOrCreatePin(routeShortName, entity.routeColor, entity.routeTextColor);\n    return { latitude, longitude, markerIcon, vehicleLabel: entity.vehicle.vehicle.label };\n}\n\nexport async function cleanupMarkers(activeVehicleLabels) {\n    Object.keys(busMarkers).forEach(vehicleLabel => {\n        if (!activeVehicleLabels.has(vehicleLabel)) {\n            busMarkers[vehicleLabel].remove();\n            delete busMarkers[vehicleLabel];\n        }\n    });\n}\n
===================================================================
diff --git a/public/fetchData.js b/public/fetchData.js
--- a/public/fetchData.js	
+++ b/public/fetchData.js	
@@ -1,4 +1,6 @@
-import { busMarkers, fetchOrCreatePin, moveMarkerSmoothly, createNewMarker, busStopIcon } from './busMarkers.js';
+import { busMarkers, fetchOrCreatePin, moveMarkerSmoothly, createNewMarker } from './busMarkers.js';
+import { userIcon } from './frontend.js';
+import { busStopIcon } from './frontend.js';
 
 export async function fetchStops(map) {
     try {
@@ -16,26 +18,33 @@
     }
 }
 
-export async function fetchBusPositions(map) {
-    console.log('Starting fetch for bus positions...');
+export async function fetchBusPositions() {
     try {
-        const response = await fetch('/api/vehicle-positions');
-        console.log(`Fetch response status: ${response.status}`);
-
+        let response = await fetch('/api/vehicle-positions');
         if (!response.ok) {
             throw new Error(`HTTP error! status: ${response.status}`);
         }
+        let data = await response.json();
+        await processVehiclePositions(data); // Await the processing of vehicle positions
+
 
-        const data = await response.json();
-        console.log('Fetch response data:', data);
+        // Clear previous error messages
+        document.getElementById("error-message").textContent = "";
 
-        await processVehiclePositions(data); // Pass map to processVehiclePositions
-        console.log('Processed vehicle positions successfully.');
+        // Check for specific error message from backend
+        if (data.error && data.error === "GTFS data is currently not available. Please try again later.") {
+            document.getElementById("error-message").textContent = "🛑 Error on getting buses positions from Motion. 🤷‍♂️";
+            return; // Stop further processing
+        }
+
+        await processVehiclePositions(data);
+
     } catch (error) {
         console.error('Error fetching vehicle positions:', error);
+        // Update the UI to show a generic error message
+        document.getElementById("error-message").textContent = "🛑 Error on getting buses positions from Motion. 🤷‍♂️";
     }
 }
-
 export async function processVehiclePositions(data, map) {
     const activeVehicleLabels = new Set();
     for (const entity of data) {
@@ -44,11 +53,68 @@
         if (busMarkers[vehicleLabel]) {
             moveMarkerSmoothly(busMarkers[vehicleLabel], [latitude, longitude]);
         } else {
-            busMarkers[vehicleLabel] = await createNewMarker(latitude, longitude, markerIcon, entity);
+            busMarkers[vehicleLabel] = await createNewMarker(latitude, longitude, markerIcon, entity, map); // Pass map to createNewMarker
         }
     }
+    cleanupMarkers(activeVehicleLabels);
+    console.log('Updated bus markers.');
+}
+/* async function processVehiclePositions(data) {
+    data.forEach(bus => {
+        const lat = bus.vehicle.position.latitude;
+        const lon = bus.vehicle.position.longitude;
+
+        // Validate latitude and longitude
+        if (lat === undefined || lon === undefined) {
+            return;
+        }
+
+        const marker = L.marker([lat, lon], { icon: userIcon });
+        marker.addTo(map);
+        busMarkers[bus.id] = marker;
+    });
+    const activeVehicleLabels = new Set(); // Track active vehicles
+
+    for (const entity of data) {
+        const {latitude, longitude, markerIcon, vehicleLabel} = await extractMarkerData(entity);
+        activeVehicleLabels.add(vehicleLabel);
+
+        if (busMarkers[vehicleLabel]) {
+            moveMarkerSmoothly(busMarkers[vehicleLabel], [latitude, longitude]);
+
+            // Update the icon with new bearing
+            const bearing = entity.vehicle.position.bearing+180 || 0; // Default to 0 if undefined
+            const customHtmlContent = `
+            <div style="position: relative; font-size: 12px; text-align: center; width: 70px;">
+                <div style="position: relative; top: 78%; left: 60%; transform: translateX(-100%) rotate(${bearing}deg);">
+                    <img src="${markerIcon.options.iconUrl}" style="width: 32px; height: 47px;">
+                        <div style="position: absolute; top: 22%; left: 22%; transform: translateX(-50%) rotate(-${bearing}deg); color: ${entity.routeTextColor};">
+                            ${entity.routeShortName}
+                        </div>
+                </div>
+            </div>`;
+            const customIcon = L.divIcon({
+                html: svgContent,
+                iconSize: [32, 47],
+                iconAnchor: [16, 23.5], // Adjust as necessary
+                popupAnchor: [0, -23.5] // Adjust as necessary
+            });
+
+            busMarkers[vehicleLabel].setIcon(customIcon);
+        }
+        else {
+            // If marker doesn't exist, create a new one
+            busMarkers[vehicleLabel] = await createNewMarker(latitude, longitude, markerIcon, entity, map); // Pass map to createNewMarker
+        }
+
+    }
+
+    // Now cleanup markers for vehicles no longer present
     cleanupMarkers(activeVehicleLabels);
 }
+ */
+
+
 
 async function extractMarkerData(entity) {
     const routeShortName = entity.routeShortName || "?";
@@ -65,4 +131,5 @@
             delete busMarkers[vehicleLabel];
         }
     });
+    console.log('Cleaned up inactive bus markers.');
 }
